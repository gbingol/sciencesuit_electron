export class Water {
    constructor() {
        //water
        this.T = () => {
            return [273.16, 278.15, 283.15, 288.15, 293.15, 298.15, 303.15, 308.15, 313.15, 318.15,
                323.15, 328.15, 333.15, 338.15, 343.15, 348.15, 353.15, 358.15, 363.15, 368.15, 373.15, 378.15,
                383.15, 388.15, 393.15, 398.15, 403.15, 408.15, 413.15, 418.15, 423.15, 428.15, 433.15, 438.15,
                443.15, 448.15, 453.15, 458.15, 463.15, 468.15, 473.15, 478.15, 483.15, 488.15, 493.15, 498.15,
                503.15, 508.15, 513.15, 518.15, 523.15, 528.15, 533.15, 538.15, 543.15, 548.15, 553.15, 558.15,
                563.15, 568.15, 573.15, 578.15, 583.15, 588.15, 593.15, 603.15, 613.15, 623.15, 633.15, 643.15,
                647.29];
        };
        this.P = () => {
            return [0.6113, 0.8721, 1.2276, 1.7051, 2.339, 3.169, 4.246, 5.628, 7.384, 9.593, 12.349,
                15.758, 19.94, 25.03, 31.19, 38.58, 47.39, 57.83, 70.14, 84.55, 101.35, 120.82, 143.27, 169.06,
                198.53, 232.1, 270.1, 313, 361.3, 415.4, 475.8, 543.1, 617.8, 700.5, 791.7, 892, 1002.1, 1112.7,
                1254.4, 1397.8, 1553.8, 1723, 1906.2, 2104, 2318, 2548, 2795, 3060, 3344, 3648, 3973, 4319, 4688,
                5081, 5499, 5942, 6412, 6909, 7436, 7993, 8581, 9202, 9856, 10547, 11274, 12845, 14586, 16513,
                18651, 21030, 22090];
        };
        this.vf = () => {
            return [0.001, 0.001, 0.001, 0.001001, 0.001002, 0.001003, 0.001004, 0.001006, 0.001008,
                0.00101, 0.001012, 0.001015, 0.001017, 0.00102, 0.001023, 0.001026, 0.001029, 0.001033, 0.001036,
                0.00104, 0.001044, 0.001048, 0.001052, 0.001056, 0.00106, 0.001065, 0.00107, 0.001075, 0.00108,
                0.001085, 0.001091, 0.001096, 0.001102, 0.001108, 0.001114, 0.001121, 0.001127, 0.001134, 0.001141,
                0.001149, 0.001157, 0.001164, 0.001173, 0.001181, 0.00119, 0.001199, 0.001209, 0.001219, 0.001229,
                0.00124, 0.001251, 0.001263, 0.001276, 0.001289, 0.001302, 0.001317, 0.001332, 0.001348, 0.001366,
                0.001384, 0.001404, 0.001425, 0.001447, 0.001472, 0.001499, 0.001561, 0.001638, 0.00174, 0.001893,
                0.002213, 0.003155];
        };
        this.vg = () => {
            return [206.14, 147.12, 106.38, 77.93, 57.79, 43.36, 32.89, 25.22, 19.52, 15.26, 12.03,
                9.568, 7.671, 6.197, 5.042, 4.131, 3.407, 2.828, 2.361, 1.982, 1.6729, 1.4194, 1.2102, 1.0366,
                0.8919, 0.7706, 0.6685, 0.5822, 0.5089, 0.4463, 0.3928, 0.3468, 0.3071, 0.2727, 0.2428, 0.2168,
                0.19405, 0.17409, 0.15654, 0.14105, 0.12736, 0.11521, 0.10441, 0.09479, 0.08619, 0.07849, 0.07158,
                0.06357, 0.05976, 0.05471, 0.05013, 0.04598, 0.04221, 0.03877, 0.03564, 0.03279, 0.03017, 0.02777,
                0.02557, 0.02354, 0.02167, 0.019948, 0.01835, 0.016867, 0.015488, 0.012996, 0.010797, 0.008813,
                0.006945, 0.004925, 0.003155];
        };
        this.hf = () => {
            return [0.01, 20.98, 42.01, 62.99, 83.96, 104.89, 125.79, 146.68, 167.57, 188.45, 209.33,
                230.23, 251.13, 272.06, 292.98, 313.93, 334.91, 355.9, 376.92, 397.96, 419.04, 440.15, 461.3, 482.48,
                503.71, 524.99, 546.31, 567.69, 589.13, 610.63, 632.2, 653.84, 675.55, 697.34, 719.21, 741.17,
                763.12, 785.37, 807.62, 829.98, 852.45, 875.04, 897.76, 920.62, 943.62, 966.78, 990.12, 1013.62,
                1037.32, 1061.23, 1085.36, 1109.73, 1134.37, 1159.28, 1184.51, 1210.07, 1235.99, 1262.31, 1289.07,
                1316.3, 1344, 1372.4, 1401.3, 1431, 1461.5, 1525.3, 1594.2, 1670.6, 1760.5, 1890.5, 2099.3];
        };
        this.hg = () => {
            return [2501.4, 2510.6, 2519.8, 2528.9, 2538.1, 2547.2, 2556.3, 2565.3, 2574.3, 2583.2,
                2592.1, 2600.9, 2609.6, 2618.3, 2626.8, 2635.3, 2643.7, 2651.9, 2660.1, 2668.1, 2676.1, 2683.8,
                2691.5, 2699, 2706.3, 2713.5, 2720.5, 2727.3, 2733.9, 2740.3, 2746.5, 2752.4, 2758.1, 2763.5,
                2768.7, 2273.6, 2278.2, 2782.4, 2786.4, 2790, 2793.2, 2796, 2798.5, 2800.5, 2802.1, 2803.3, 2804,
                2804.2, 2803.8, 2803, 2801.5, 2799.5, 2796.9, 2793.6, 2789.7, 2785, 2779.6, 2773.3, 2766.2, 2758.1,
                2749, 2738.7, 2727.3, 2714.5, 2700.1, 2665.9, 2622, 2563.9, 2481, 2332.1, 2099.3];
        };
        this.sf = () => {
            return [0, 0.0761, 0.151, 0.2245, 0.2966, 0.3674, 0.4369, 0.5053, 0.5725, 0.6387, 0.7038,
                0.7679, 0.8312, 0.8935, 0.9549, 1.10155, 1.0753, 1.1343, 1.1925, 1.25, 1.3069, 1.363, 1.4185,
                1.4734, 1.5276, 1.5813, 1.6344, 1.687, 1.7391, 1.7907, 1.8418, 1.8925, 1.9427, 1.9925, 2.0419,
                2.0909, 2.1396, 2.1879, 2.2359, 2.2835, 2.3309, 2.378, 2.4248, 2.4714, 2.5178, 2.5639, 2.6099,
                2.6558, 2.7015, 2.7472, 2.7927, 2.8383, 2.8838, 2.9294, 2.9751, 3.0208, 3.0668, 3.113, 3.1594,
                3.2062, 3.2534, 3.301, 3.3493, 3.3982, 3.448, 3.5507, 3.6594, 3.7777, 3.9147, 4.1106, 4.4298];
        };
        this.sg = () => {
            return [9.1562, 9.0257, 8.9008, 8.7814, 8.6672, 8.558, 8.4533, 8.3531, 8.257, 8.1648,
                8.0763, 7.9913, 7.9096, 7.831, 7.7553, 7.6828, 7.6122, 7.5545, 7.4791, 7.4159, 7.3549, 7.2958,
                7.2387, 7.1833, 7.1296, 7.0775, 7.0269, 6.9777, 6.9299, 6.8833, 6.8379, 6.7935, 6.7502, 6.7078,
                6.6663, 6.6256, 6.5857, 6.5465, 6.5079, 6.4698, 6.4323, 6.3952, 6.3585, 6.3221, 6.2861, 6.2503,
                6.2146, 6.1791, 6.1437, 6.1083, 6.073, 6.0375, 6.0019, 5.9662, 5.9301, 5.8938, 5.8571, 5.8199,
                5.7821, 5.7437, 5.7045, 5.6643, 5.623, 5.5804, 5.5362, 5.4417, 5.3357, 5.2112, 5.0526,
                4.7971, 4.4298];
        };
    }
}
export function findIndexes(arr, value, isIncreasing = true) {
    /*
    Given an array and a value
    it finds the indexes of elements that bounds the value

    arr = [1, 5, 8] and value =7 returns [1, 2]
    */
    let uBnd = -1, lBnd = -1;
    if (isIncreasing) {
        uBnd = arr.findIndex((elem) => elem >= value);
        lBnd = arr.findLastIndex((elem) => elem < value);
    }
    if (uBnd < 0 || lBnd < 0)
        throw new Error("Index could not be found. " + value + " does not exist.");
    return [lBnd, uBnd];
}
